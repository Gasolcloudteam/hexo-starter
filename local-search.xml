<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python学习笔记</title>
    <link href="/2021/08/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/08/15/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="print-函数与变量"><a href="#print-函数与变量" class="headerlink" title="print()函数与变量"></a>print()函数与变量</h1><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><p>1.print()函数以及引号的使用</p><p>2.换行的两种简便方法</p><p>3.区分赋值与等于</p><h2 id="重要内容"><a href="#重要内容" class="headerlink" title="重要内容"></a>重要内容</h2><h3 id="一、最基本的一条代码"><a href="#一、最基本的一条代码" class="headerlink" title="一、最基本的一条代码"></a><strong>一、最基本的一条代码</strong></h3><p>\1. print()函数  print()函数由两部分构成：</p><ul><li><p>指令：print；</p></li><li><p>指令的执行对象：在print后面的括号里的内容</p></li></ul><p>\2. 引号的用法</p><p>​    单引号和双引号都可以使用，但需要匹配，并且配合使用可以区分开原文和print()函数的结构。例如，print(“Let’s go”)，双引号的作用是函数结构，单引号是英文语法。</p><p>​    不用引号时，括号内必须是数字或者数字运算，这是计算机可以理解的内容。例如：print(1+1)，最后输出是2。</p><p>​    注意：python中所有的符号都是英文状态下的，并且会区分大小写。</p><h3 id="二、换行"><a href="#二、换行" class="headerlink" title="二、换行"></a><strong>二、换行</strong></h3><ol><li><p>重复使用print()函数，将不同行的语句放在不同的函数中输出。（事倍功半）</p></li><li><p>使用三引号：用三引号将需要分行的内容括起来，并且在引号内使用回车进行段落排版。例如：</p></li></ol><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="DuxR">print(<span class="ql-token hljs-string">'''我愿意留在汤婆婆的澡堂里工作两年，</span></div><div class="ql-code-block" line="TjaR"><span class="ql-token hljs-string">    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一年在锅炉房和锅炉爷爷一起烧锅炉水，</span></div><div class="ql-code-block" line="i6KH"><span class="ql-token hljs-string">    &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二年在澡堂给客人搓背，</span></div><div class="ql-code-block" line="lXjH"><span class="ql-token hljs-string">              如果我违背工作内容的话，</span></div><div class="ql-code-block" line="ex87"><span class="ql-token hljs-string">    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 将在这个世界变成一头猪。'''</span>)</div></div><ol><li>使用\n，此时是不允许回车换行的！例如：</li></ol><p><code>print(&#39;我愿意留在汤婆婆的澡堂里工作两年,\n第一年在锅炉房和锅炉爷爷一起烧锅炉水,\n第二年在澡堂给客人搓背,\n如果我违背工作内容的话,\n将在这个世界变成一头猪。&#39;)</code> </p><h3 id="三、转义字符"><a href="#三、转义字符" class="headerlink" title="三、转义字符"></a>三、转义字符</h3><p>​    对于可作为结构性符号的，例如单引号，感叹号，若想直接使用，可在符号前加一个反斜线\。则对于之前的例子：print(“Let’s go”)，也可以写作print(‘Let\’s go’),中间的单引号由于使用了反斜线，所以作为整条语句的内容而不是print()函数的结构。</p><h3 id="四、变量与赋值"><a href="#四、变量与赋值" class="headerlink" title="四、变量与赋值"></a><strong>四、变量与赋值</strong></h3><ol><li><p>变量是我们自己创建的，命名要求：</p></li><li><p>只能是一个词</p></li><li><p>只能包含字母、数字、下划线（下划线可以用于连接多词）</p></li><li><p>不能以数字开头</p></li><li><p>尽量描述包含的数据内容（抽象概括存储的内容）</p></li></ol><p>​    代码中的=（等号）是用于赋值而逻辑上的等于要使用两个等号，即1+1==2。</p><p>变量的特点：保存的数据是可以随意变化的，储存的值永远都是最新的那个。例如：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="8YVn"><span class="ql-token hljs-attribute">name</span>=<span class="ql-token hljs-string">'魔法少女千酱'</span></div><div class="ql-code-block" line="Foxp"><span class="ql-token hljs-attribute">name</span>=<span class="ql-token hljs-string">'夏目千千'</span></div><div class="ql-code-block" line="UyMT"><span class="ql-token hljs-attribute">name</span>=<span class="ql-token hljs-string">'千寻'</span></div><div class="ql-code-block" line="LJwP"><span class="ql-token hljs-builtin-name">print</span>(name)</div></div><p>这段代码输出是结果是‘千寻’</p><h2 id="数据类型与转换"><a href="#数据类型与转换" class="headerlink" title="数据类型与转换"></a>数据类型与转换</h2><h3 id="难点-1"><a href="#难点-1" class="headerlink" title="难点"></a>难点</h3><p>1.区分字符串下的数字与整数、浮点数下的数字</p><p>2.使用【+】进行数据拼接时，连接的数据类型必须为同数据类型</p><p>3.使用函数进行数据类型的转换时，int()与float()函数括号内的数据必须为纯数字型文本</p><h2 id="重要内容-1"><a href="#重要内容-1" class="headerlink" title="重要内容"></a>重要内容</h2><h3 id="一、常见的三种数据类型"><a href="#一、常见的三种数据类型" class="headerlink" title="一、常见的三种数据类型"></a><strong>一、常见的三种数据类型</strong></h3><p>1、字符串</p><p>特点：被引号括起来的文本。（注意引号要使用英文状态下的单引号或者双引号、三引号）</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="4P7E">例：</div><div class="ql-code-block" line="8iAH">slogan = <span class="ql-token hljs-string">'命运！不配做我的对手！'</span></div><div class="ql-code-block" line="1qZP">attack = <span class="ql-token hljs-string">"308"</span></div><div class="ql-code-block" line="DBcL">gold = <span class="ql-token hljs-string">"48g"</span></div><div class="ql-code-block" line="wAre">blood = <span class="ql-token hljs-string">'''+101'''</span></div><div class="ql-code-block" line="WRQx">achieve = <span class="ql-token hljs-string">"First Blood!"</span></div></div><p>​    先将内容以字符串形式赋值给变量，最后使用print()函数输出变量即可。</p><p>2、整数</p><p>​    整数英文为integer，简写做int。是正整数、负整数和零的统称，是没有小数点的数字。</p><p>​    特点：无需配合引号使用，可进行计算。如：108（整数）‘108’（字符串）‘6小灵童’（字符串）但若存在文字类数据，则必须使用引号，将其变为字符串类型。例：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="NKxs"><span class="ql-token hljs-builtin-name">print</span>(6小灵童)</div><div class="ql-code-block" line="tvNZ"><span class="ql-token hljs-builtin-name">print</span>(6skr)</div><div class="ql-code-block" line="SZYZ"><span class="ql-token hljs-comment">#打印数据</span></div><div class="ql-code-block" line="ORT4">SyntaxError: invalid syntax</div><div class="ql-code-block" line="D7Q6"><span class="ql-token hljs-comment">#终端显示结果：报错：无效语法</span></div></div><p>​    具体的计算符号：（优先级与日常算数一致）</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210815/Python%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="Python算术运算符"></p><p>3、浮点数</p><p>​    相对于整数而言，浮点数就是带小数点的数字。英文名是float，与整数int()和字符串str()不同，浮点数没有简写。</p><h3 id="二、查询数据类型——type-函数"><a href="#二、查询数据类型——type-函数" class="headerlink" title="二、查询数据类型——type()函数"></a><strong>二、查询数据类型——type()函数</strong></h3><p>​    作用：查询数据类型</p><p>​    例：print(type(‘查询内容’))</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="h4o6">achieve = <span class="ql-token hljs-string">'Penta Kill'</span></div><div class="ql-code-block" line="em78"><span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-built_in">type</span>(achieve))</div><div class="ql-code-block" line="Pfzo">#结果显示：&lt;<span class="ql-token hljs-class">class 'str'&gt;</span></div></div><h3 id="三、数据拼接"><a href="#三、数据拼接" class="headerlink" title="三、数据拼接"></a><strong>三、数据拼接</strong></h3><p>​    利用数据拼接符号【+】，将需要拼接的变量连在一起。注意：变量内的数据类型必须为字符串型才可进行拼接！如：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="Uf7r">hero = '亚瑟' </div><div class="ql-code-block" line="bZzj">enemy = '敌方'</div><div class="ql-code-block" line="S0Tc">action = '团灭'</div><div class="ql-code-block" line="zYqy">gain = '获得'</div><div class="ql-code-block" line="eOTF">achieve = 'ACE称号'</div><div class="ql-code-block" line="jxJ5"><span class="ql-token hljs-comment">#结果显示为</span></div><div class="ql-code-block" line="nmKi"><span class="ql-token hljs-comment">#亚瑟团灭敌方获得ACE称号</span></div><div class="ql-code-block" line="rLbB">print(hero+action+enemy+gain+achieve)</div><div class="ql-code-block" line="rjwr">hero = '亚瑟'&nbsp;</div><div class="ql-code-block" line="vIeW">enemy = '敌方'</div><div class="ql-code-block" line="teih">action = '秒杀'</div><div class="ql-code-block" line="Tfzc">gain = '获得'</div><div class="ql-code-block" line="X5VQ">number = 5</div><div class="ql-code-block" line="QWTI">achieve = 'Penta Kill'</div><div class="ql-code-block" line="2yxG">print(hero+action+number+enemy+gain+achieve)</div><div class="ql-code-block" line="eCoe"><span class="ql-token hljs-comment">#结果显示报错：TypeError：can only concatenate str (not "int") to str</span></div><div class="ql-code-block" line="jY0k"><span class="ql-token hljs-comment">#类型错误：只能将字符串与字符串拼接</span></div></div><h3 id="四、数据类型转换"><a href="#四、数据类型转换" class="headerlink" title="四、数据类型转换"></a><strong>四、数据类型转换</strong></h3><p>1、转换为字符串类型</p><p>​    str()函数能将数据转换成其字符串类型。只要将所需数据放到括号里，这个数据就能成为字符串类型。</p><p>​    用引号将数据括起来也能达到同样结果。</p><p>​    例如：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="EZHp">hero = '亚瑟'&nbsp;</div><div class="ql-code-block" line="csQ7">enemy = '敌方'</div><div class="ql-code-block" line="1czW">action = '秒杀'</div><div class="ql-code-block" line="Umcv">gain = '获得'</div><div class="ql-code-block" line="H4LE">number = 5</div><div class="ql-code-block" line="SKDG">achieve = 'Penta Kill'</div><div class="ql-code-block" line="7Boj">print(hero+action+str(number)+enemy+gain+achieve)</div><div class="ql-code-block" line="BCFT">print(hero+action+'5'+enemy+gain+achieve)</div><div class="ql-code-block" line="r00Q"><span class="ql-token hljs-comment">#使用str()函数将变量number里的数字5变成了字符串5。</span></div></div><p>2、转换为整数</p><p>​    int()函数的使用，与str()类似。注意一点：只有符合整数规范的字符串类数据，才能被int()强制转换。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="G2j2"><span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-built_in">int</span>(<span class="ql-token hljs-string">'3.8'</span>))</div><div class="ql-code-block" line="EYFO">#运行后显示结果：ValueError：invalid literal <span class="ql-token hljs-keyword">for</span> <span class="ql-token hljs-built_in">int</span>() <span class="ql-token hljs-keyword">with</span> base <span class="ql-token hljs-number">10</span>: <span class="ql-token hljs-string">'3.8'</span></div></div><p>​    小数型字符串会直接报错，而浮点数会被强制转换：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="Fwa0"><span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-keyword">int</span>(<span class="ql-token hljs-number">3.8</span>))</div><div class="ql-code-block" line="2iPR"><span class="ql-token hljs-meta">#运行后结果显示：3</span></div></div><p>​    也就是说，对于浮点数，int()会保留其整数部分。注意：不是四舍五入！</p><p>3、转换为浮点数</p><p>float()函数的使用与int()、str()类似。如果括号里面的数据是字符串类型，那这个数据一定得是数字形式。</p><h2 id="条件判断与条件嵌套"><a href="#条件判断与条件嵌套" class="headerlink" title="条件判断与条件嵌套"></a>条件判断与条件嵌套</h2><h3 id="难点-2"><a href="#难点-2" class="headerlink" title="难点"></a>难点</h3><p>1.逻辑判断应使用逻辑符号等于【==】</p><p>2.条件语句后一定要记得接冒号【:】，注意观察冒号之后的语句是否缩进以及同级别的语句是否在格式上处于并列状态。</p><p>3.在执行变量的判断之前，要注意变量是否已经被赋值</p><h3 id="重要内容-2"><a href="#重要内容-2" class="headerlink" title="重要内容"></a>重要内容</h3><h3 id="一、条件判断"><a href="#一、条件判断" class="headerlink" title="一、条件判断"></a>一、条件判断</h3><p>​    即中文逻辑语句“如果…就…”。在进行判断之前，一定要先对变量进行赋值！条件判断就是针对不同的可能性，进行不同操作。赋值情况的前提不满足if的条件时，自动跳过，执行下一行命令。</p><p>​    其次，每一个判断语句之后要使用冒号【:】，表示接下来的内容是只有满足条件才运行的。若不是条件下的语句，要记得删除缩进。</p><p><strong>1、单向判断</strong></p><p>​    要是if之后的条件不满足，就跳过if语句进行下一命令。格式：</p><p>​    if xxx(判断的条件)：</p><p>​    如果满足上述条件，就执行的操作语句</p><p><strong>2、双相判断</strong></p><p>​    要是if之后的条件不满足，就执行else里的。if与else平级（缩进一致，在else前必须有一个平级的前提）。每一个条件不能有重合部分，是互斥的，格式：</p><p>​    if xxx(判断的条件):</p><p>​    如果满足上述条件，就执行的操作语句</p><p>​    else：</p><p>​    如果不满足if之后的语句，就执行的操作语句</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="CIri">weight=<span class="ql-token hljs-number">101</span></div><div class="ql-code-block" line="iO5F"><span class="ql-token hljs-meta">#要先为酱酱的体重赋值，酱酱的体重是101斤</span></div><div class="ql-code-block" line="J1ki"><span class="ql-token hljs-keyword">if</span> weight&gt;<span class="ql-token hljs-number">100</span>:</div><div class="ql-code-block" line="wwZL"><span class="ql-token hljs-meta">#如果体重超过100斤的条件下，就……(条件后需加冒号)</span></div><div class="ql-code-block" line="u8xZ">  <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'不吃了'</span>)</div><div class="ql-code-block" line="vmog">  <span class="ql-token hljs-meta">#就打印结果：不吃了！(注意检查是否自动缩进)</span></div><div class="ql-code-block" line="bylK">  </div><div class="ql-code-block" line="R23W"><span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="VDpl"><span class="ql-token hljs-meta">#如果体重没有超过100斤的条件，就……(else条件前无缩进，条件后需加冒号)</span></div><div class="ql-code-block" line="jDMT">  <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'放心吃吧'</span>)</div><div class="ql-code-block" line="tIAR">  <span class="ql-token hljs-meta">#就打印：放心吃吧(注意检查是否自动缩进）</span></div></div><p><strong>3、多向判断</strong></p><p>​    if、elif和else平级。可以存在多个elif，数量根据整体能分成的所需选项数来定。注意：每一个条件不能有重合部分，是互斥的，即x&lt;10与9&lt;x&lt;15，这样的两个条件是不可行的。如果不满足if的条件，就判断是否满足elif下的条件，若所有elif的条件都不满足，就执行else下的语句。并且elif之后可以不接else，格式：</p><p>​    if xxx(判断的条件)：</p><p>​    如果满足上述条件，执行的操作语句</p><p>​    elif xxx(与前一个if互斥的另一个条件):</p><p>​    如果满足elif后的条件，就需要执行的语句</p><p>​    else：</p><p>​    若if、elif后面的条件都不满足，则会执行的语句</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="7dN1">stonenumber=<span class="ql-token hljs-number">1</span></div><div class="ql-code-block" line="3Vg3"><span class="ql-token hljs-meta">#一定要先为宝石数量赋值</span></div><div class="ql-code-block" line="thJ9"><span class="ql-token hljs-keyword">if</span> stonenumber&gt;=<span class="ql-token hljs-number">6</span>: <span class="ql-token hljs-meta">#注意冒号</span></div><div class="ql-code-block" line="zfb9">    <span class="ql-token hljs-meta">#条件：如果你拥有的宝石数量大于等于6个</span></div><div class="ql-code-block" line="SZOK">    <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'你拥有了毁灭宇宙的力量'</span>) <span class="ql-token hljs-meta">#注意缩进</span></div><div class="ql-code-block" line="20fF">    </div><div class="ql-code-block" line="Be0b">elif <span class="ql-token hljs-number">3</span>&lt;stonenumber&lt;=<span class="ql-token hljs-number">5</span>:</div><div class="ql-code-block" line="msab">    <span class="ql-token hljs-meta">#条件：如果宝石数量在4至5个</span></div><div class="ql-code-block" line="T2ah">    <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'红女巫需要亲手毁掉幻视额头上的心灵宝石'</span>)</div><div class="ql-code-block" line="foq8">    </div><div class="ql-code-block" line="lUzM"><span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="joS6">    <span class="ql-token hljs-meta">#条件：当赋值不满足if和elif条件时，执行else下的命令，即宝石数量在3个以下</span></div><div class="ql-code-block" line="76qW">    <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'需要惊奇队长逆转未来'</span>)</div></div><h3 id="二、if嵌套"><a href="#二、if嵌套" class="headerlink" title="二、if嵌套"></a>二、if嵌套</h3><p>​    在基础条件满足的情况下，再在基础条件底下增加额外的条件判断。在编写if嵌套语句时，同样的，可以按照框架，从大到小，依次往不同的大条件中补充额外条件。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="XvWo">historyscore=26</div><div class="ql-code-block" line="mnUP"><span class="ql-token hljs-keyword">if</span> historyscore&gt;=60:</div><div class="ql-code-block" line="hFNa">    <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'你已经及格'</span>)</div><div class="ql-code-block" line="oavD">    <span class="ql-token hljs-keyword">if</span> historyscore&gt;=80:</div><div class="ql-code-block" line="EVTB">        <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'你很优秀'</span>)</div><div class="ql-code-block" line="Yr5E">    <span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="kPgs">        <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'你只是一般般'</span>)</div><div class="ql-code-block" line="IIrS"><span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="lkI1">    <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'不及格'</span>)</div><div class="ql-code-block" line="zJaQ">    <span class="ql-token hljs-keyword">if</span> historyscore&lt;30:</div><div class="ql-code-block" line="1HTd">        <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'学渣'</span>)</div><div class="ql-code-block" line="apYi">    <span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="pwcq">        <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'还能抢救一下'</span>)</div><div class="ql-code-block" line="JKSy"><span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'程序结束'</span>）</div><div class="ql-code-block" line="dqfd"><span class="ql-token hljs-comment">#结果显示为 ：</span></div><div class="ql-code-block" line="zldg"><span class="ql-token hljs-comment">#不及格</span></div><div class="ql-code-block" line="kS9J"><span class="ql-token hljs-comment">#学渣</span></div><div class="ql-code-block" line="KNip"><span class="ql-token hljs-comment">#程序结束 </span></div></div><p>每一个级别下的条件都只能执行一个！（互斥）elif与if类似。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210815/if%E5%B5%8C%E5%A5%97.png" alt="if嵌套"></p><h2 id="input-函数"><a href="#input-函数" class="headerlink" title="input()函数"></a>input()函数</h2><h3 id="难点-3"><a href="#难点-3" class="headerlink" title="难点"></a>难点</h3><ol><li><p>input()函数括号内的内容会被输出，但需要输入对应数据才能继续执行之后代码</p></li><li><p>input()函数的结果必须赋值给变量，且数据类型为字符串型</p></li></ol><h3 id="重要内容-3"><a href="#重要内容-3" class="headerlink" title="重要内容"></a>重要内容</h3><h3 id="input-函数-1"><a href="#input-函数-1" class="headerlink" title="input()函数"></a>input()函数</h3><p><strong>1、定义</strong></p><p>​    input()函数是输入函数，与print()函数类似，input()函数括号里面的内容是会显示出来的，但不同在于我们需要输入对应的内容，回车后才能继续运行。</p><p><strong>2、input()函数赋值</strong></p><p>​    在括号内用引号括起提示语，例：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="XtSO"><span class="ql-token hljs-function">input('请铲屎官输入宠物的名字：')</span></div><div class="ql-code-block" line="1WL0">#运用input函数搜集信息</div></div><p>输入的内容被储存在计算机内，需要将结果赋值给变量。例：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="YX0x"><span class="ql-token hljs-built_in">print</span>（<span class="ql-token hljs-string">'那么，您的选择是什么？"1"接受，还是"2"放弃呢？'</span>）</div><div class="ql-code-block" line="Er1N">choice = input(<span class="ql-token hljs-string">'请输入您的选择：'</span>)</div><div class="ql-code-block" line="K1OU"><span class="ql-token hljs-comment">#变量赋值</span></div><div class="ql-code-block" line="X3V1"><span class="ql-token hljs-keyword">if</span> choice == <span class="ql-token hljs-string">'1'</span>:</div><div class="ql-code-block" line="jEEn">    <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'霍格沃茨欢迎你的到来'</span>)</div><div class="ql-code-block" line="upMz"><span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="JFEM">    <span class="ql-token hljs-built_in">print</span>(<span class="ql-token hljs-string">'您可是被梅林选中的孩子，我们不接受这个选项。)</span></div></div><p><strong>3、input()函数的数据类型</strong></p><p>​    对于input()函数来说，不管输入的是整数1234，还是字符串‘我爱摩卡’，input()函数的输入值（搜集到的回答），永远会被强制性地转换为字符串类型。（Python3固定规则）所以，不管我们在终端区域输入什么，input()函数的返回值一定是字符串，将结果赋值给变量后，变量的数据类型也一定是字符串。</p><p><strong>4、input()函数的数据类型转换</strong></p><p>​    使用数据类型转换函数，int()，float()可以从源头强制转换为对应类型。但是要注意，此时的input()函数返回值一定要是纯数字型！例：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="BnPW">money = <span class="ql-token hljs-keyword">int</span>(<span class="ql-token hljs-keyword">input</span>(<span class="ql-token hljs-string">'你一个月工资多少钱？'</span>))</div><div class="ql-code-block" line="VeEh"><span class="ql-token hljs-meta">#将输入的工资数（字符串），强制转换为整数</span></div><div class="ql-code-block" line="hcHs"><span class="ql-token hljs-keyword">if</span> money &gt;= <span class="ql-token hljs-number">10000</span>:</div><div class="ql-code-block" line="3lKV">    <span class="ql-token hljs-meta">#当工资数（整数）大于等于10000（整数）时</span></div><div class="ql-code-block" line="Arvi">    <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'土豪我们做朋友吧！'</span>)</div><div class="ql-code-block" line="VH1p">    <span class="ql-token hljs-meta">#打印if条件下的结果</span></div><div class="ql-code-block" line="Hb5Q"><span class="ql-token hljs-keyword">else</span>:</div><div class="ql-code-block" line="xQrr">    <span class="ql-token hljs-meta">#当工资数（整数）小于等于10000（整数）时</span></div><div class="ql-code-block" line="dgDL">    <span class="ql-token hljs-keyword">print</span>(<span class="ql-token hljs-string">'我负责赚钱养家，你负责貌美如花～'</span>)</div><div class="ql-code-block" line="pP8C">    <span class="ql-token hljs-meta">#打印else条件下</span></div></div><p>​    注：输入值会运用到计算时，千万记得用int()转换！</p><h2 id="列表和字典-收纳的艺术"><a href="#列表和字典-收纳的艺术" class="headerlink" title="列表和字典-收纳的艺术"></a><strong>列表和字典-收纳的艺术</strong></h2><h3 id="难点-4"><a href="#难点-4" class="headerlink" title="难点"></a>难点</h3><ol><li><p>列表与字典增删改查的异同</p></li><li><p>正确使用切片，深刻理解切片时冒号左右数字的意义</p></li></ol><h3 id="重要内容-4"><a href="#重要内容-4" class="headerlink" title="重要内容"></a>重要内容</h3><h3 id="一、列表"><a href="#一、列表" class="headerlink" title="一、列表"></a>一、列表</h3><ol><li>代码格式</li></ol><p>​    数据存储在中括号[]里，用逗号隔开并使用等号赋值给列表。中括号里面的每一个数据叫作“元素”。</p><p>​    列表中的元素是有自己明确的“位置”的，元素相同，在列表中排列顺序不同，就是两个不同的列表。</p><p>​    列表中字符串、整数、浮点数都可以存储。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="pv1e"><span class="ql-token hljs-attr">list</span> = [<span class="ql-token hljs-string">'小明'</span>,<span class="ql-token hljs-number">17</span>,<span class="ql-token hljs-number">5.2</span>]</div></div><ol><li>提取元素</li></ol><p>​    1）偏移量：元素在列表中的编号。</p><ul><li><p>偏移量是从0开始的；</p></li><li><p>列表名后加带偏移量的中括号，就能取到相应位置的元素。</p></li><li><p>结果是一个元素</p></li></ul><p>​    2）切片：用冒号来截取列表元素的操作。</p><ul><li><p>冒号左边空（或者为0）， ：m，表示从头取m个元素；</p></li><li><p>右边空（或者为0），n： ，跳过前n个元素把剩下的取完；</p></li><li><p>冒号左右都有数字时，n：m，表示跳过前n个元素，取到第m个。（取出前m个元素中除了前n个后剩下的那些）</p></li><li><p>切片截取了列表的一部分，所以得到的结果仍然是一个列表。（即使只有一个元素，也是在列表里的，要与用偏移量取单个元素的方法区别开）</p></li></ul><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="V6WU">students = [<span class="ql-token hljs-string">'小明'</span>,<span class="ql-token hljs-string">'小红'</span>,<span class="ql-token hljs-string">'小刚'</span>]</div><div class="ql-code-block" line="Xjzf">print(students[<span class="ql-token hljs-number">2</span>])</div><div class="ql-code-block" line="ZY0A"><span class="ql-token hljs-meta">#使用偏移量提取单一元素，结果显示：</span></div><div class="ql-code-block" line="0ddI"><span class="ql-token hljs-meta">#小刚</span></div><div class="ql-code-block" line="qt5s">print(students[<span class="ql-token hljs-number">2</span>:])</div><div class="ql-code-block" line="JGoS"><span class="ql-token hljs-meta">#使用切片，即使结果仍然只有一个元素，但显示为列表：</span></div><div class="ql-code-block" line="Innj"><span class="ql-token hljs-meta">#['小刚']</span></div></div><p>​    3）特别地，a,b,c=students，也可以提取出列表中的元素，变量分别用逗号隔开，且变量的数量与列表元素个数一致，最终列表元素会分别赋值给变量，例如：</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="9M6x">appetizer = [<span class="ql-token hljs-string">'话梅花生'</span>,<span class="ql-token hljs-string">'拍黄瓜'</span>,<span class="ql-token hljs-string">'凉拌三丝'</span>]</div><div class="ql-code-block" line="Yddk"><span class="ql-token hljs-selector-tag">a</span>,<span class="ql-token hljs-selector-tag">b</span>,c=appetizer</div><div class="ql-code-block" line="6KK9"><span class="ql-token hljs-function">print(a)</span></div><div class="ql-code-block" line="4Gkw"><span class="ql-token hljs-function">print(b)</span></div><div class="ql-code-block" line="baIm"><span class="ql-token hljs-function">print(c)</span></div><div class="ql-code-block" line="1ieX"><span class="ql-token hljs-function">print(a,b,c)</span></div><div class="ql-code-block" line="9EKd">#结果显示为</div><div class="ql-code-block" line="ioMC">#话梅花生</div><div class="ql-code-block" line="YIh5">#拍黄瓜</div><div class="ql-code-block" line="UXKg">#凉拌三丝</div><div class="ql-code-block" line="adaC">#话梅花生 拍黄瓜 凉拌三丝</div></div><ol><li>增加/删除元素</li></ol><p>​    1）增加元素</p><p>​    列表名.append()。注意这里是**.**不是空格！</p><p>​    append后的括号里只能接受一个参数，结果是让列表末尾新增一个元素。列表长度可变，理论容量无限，所以支持任意的嵌套。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="cowN">list3 = [<span class="ql-token hljs-number">1</span>，<span class="ql-token hljs-number">2</span>]</div><div class="ql-code-block" line="69Ch">list3.append(<span class="ql-token hljs-number">3</span>)</div><div class="ql-code-block" line="W8Mj">print(list3)</div><div class="ql-code-block" line="h0nd">#添加‘<span class="ql-token hljs-number">3</span>’这个元素</div><div class="ql-code-block" line="xEUJ">#结果显示：</div><div class="ql-code-block" line="ayZx">#[<span class="ql-token hljs-number">1</span>,<span class="ql-token hljs-number">2</span>,<span class="ql-token hljs-number">3</span>]</div><div class="ql-code-block" line="xbDB">list3.append(<span class="ql-token hljs-number">4</span>，<span class="ql-token hljs-number">5</span>)</div><div class="ql-code-block" line="i6m4">list3.append([<span class="ql-token hljs-number">4</span>，<span class="ql-token hljs-number">5</span>])</div><div class="ql-code-block" line="98lu">print(list3)</div><div class="ql-code-block" line="Jw2P">#添加‘[<span class="ql-token hljs-number">4</span>，<span class="ql-token hljs-number">5</span>]’这个列表，也就是append()的参数为一个列表，也是一个参数，所以不会报错</div><div class="ql-code-block" line="7yNF">#结果显示：</div><div class="ql-code-block" line="mi1r">#[<span class="ql-token hljs-number">1</span>，<span class="ql-token hljs-number">2</span>，<span class="ql-token hljs-number">3</span>，[<span class="ql-token hljs-number">4</span>，<span class="ql-token hljs-number">5</span>]]</div></div><p>​    但是append(4,5)会报错，因为给了两个元素（没有作为一个整体，所以算两个参数）。注意！！千万不能：a=student.append(3)，这样a里只有none。</p><p>​    2）删除元素</p><p>​    del 列表名[元素的索引] 。注意这里是空格不是.了！</p><p>​    与append()函数类似，能删除单个元素、多个元素（切片）、整个列表。</p><p>​    3）修改元素</p><p>​    使用偏移量修改对应位置的元素。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="jA2e">list1 = [<span class="ql-token hljs-string">'小明'</span>,<span class="ql-token hljs-string">'小红'</span>,<span class="ql-token hljs-string">'小刚'</span>,<span class="ql-token hljs-string">'小美'</span>]</div><div class="ql-code-block" line="T9hR">list1[<span class="ql-token hljs-number">1</span>] = <span class="ql-token hljs-string">'小蓝'</span></div><div class="ql-code-block" line="PHHT">print(list1)</div><div class="ql-code-block" line="iJaE">#结果显示</div><div class="ql-code-block" line="mnuM">#[<span class="ql-token hljs-string">'小明'</span>,<span class="ql-token hljs-string">'小蓝'</span>,<span class="ql-token hljs-string">'小刚'</span>,<span class="ql-token hljs-string">'小美'</span>]</div></div><h3 id="二、字典"><a href="#二、字典" class="headerlink" title="二、字典"></a>二、字典</h3><p>​    字典所存储的两种数据若存在一一对应的情况，用字典储存会更加方便。唯一的键和对应的值形成的整体，我们就叫做【键值对】。键具备唯一性，而值可重复。</p><ol><li>代码格式</li></ol><ul><li><p>字典外层是大括号{}，用等号赋值；</p></li><li><p>列表中的元素是自成一体的，而字典的元素是由键值对构成的，用英文冒号连接。有多少个键值对就有多少个元素。如’小明’:95，其中我们把’小明’叫键（key），95叫值(value)。</p></li><li><p>键值对间用逗号隔开</p></li></ul><p>​    字典中数据是随机排列的，调动顺序也不影响。所以列表有序，要用偏移量定位；字典无序，便通过唯一的键来定位。</p><p>​    （注：len()函数用于获取数据长度）</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="O8ps">students = [<span class="ql-token hljs-string">'小明'</span>,<span class="ql-token hljs-string">'小红'</span>,<span class="ql-token hljs-string">'小刚'</span>]</div><div class="ql-code-block" line="6t3l">scores = {<span class="ql-token hljs-string">'小明'</span>:<span class="ql-token hljs-number">95</span>,<span class="ql-token hljs-string">'小红'</span>:<span class="ql-token hljs-number">90</span>,<span class="ql-token hljs-string">'小刚'</span>:<span class="ql-token hljs-number">90</span>}</div><div class="ql-code-block" line="Dna0">print(len(students))</div><div class="ql-code-block" line="W1rg">print(len(scores))</div><div class="ql-code-block" line="dLMY"><span class="ql-token hljs-meta">#结果显示</span></div><div class="ql-code-block" line="uP7U"><span class="ql-token hljs-meta">#3</span></div><div class="ql-code-block" line="r5rw"><span class="ql-token hljs-meta">#3</span></div><div class="ql-code-block" line="d4MK"><span class="ql-token hljs-meta">#字典的元素个数，数冒号就行了</span></div></div><ol><li>提取元素</li></ol><p>​    字典没有偏移量，所以在提取元素时，中括号中应该写键的名称，即字典名[字典的键]。提取出来的是key对应的value，而不会显示键的数据！</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="Rxak">scores = {<span class="ql-token hljs-string">'小明'</span>: <span class="ql-token hljs-number">95</span>, <span class="ql-token hljs-string">'小红'</span>: <span class="ql-token hljs-number">90</span>, <span class="ql-token hljs-string">'小刚'</span>: <span class="ql-token hljs-number">90</span>}</div><div class="ql-code-block" line="O811">print(scores[<span class="ql-token hljs-string">'小明'</span>])</div><div class="ql-code-block" line="BrFw"><span class="ql-token hljs-meta">#结果显示</span></div><div class="ql-code-block" line="ZqJL"><span class="ql-token hljs-meta">#95</span></div></div><ol><li>增加/删除元素、</li></ol><p>​    1）新增元素</p><p>​    字典名[键] = 值。每次只能新增一个键值对。scores[‘小刚’,’小美’]=92,85，这样是不对的，最终会输出(‘小刚’,’小美’:(92,85))作为一个键值对。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="EtcC">album = {<span class="ql-token hljs-string">'周杰伦'</span>:<span class="ql-token hljs-string">'七里香'</span>}</div><div class="ql-code-block" line="gN2P">album[<span class="ql-token hljs-string">'王力宏'</span>] =<span class="ql-token hljs-string">'心中的日月'</span></div><div class="ql-code-block" line="HTMy">album[<span class="ql-token hljs-string">'林俊杰'</span>] = <span class="ql-token hljs-string">'小酒窝'</span></div><div class="ql-code-block" line="X6Il"><span class="ql-token hljs-function">print(album)</span></div><div class="ql-code-block" line="LK63"><span class="ql-token hljs-function">print(album['周杰伦'])</span></div><div class="ql-code-block" line="ldF4">#结果显示</div><div class="ql-code-block" line="t7Np">#{<span class="ql-token hljs-string">'周杰伦'</span>:<span class="ql-token hljs-string">'七里香'</span>，<span class="ql-token hljs-string">'王力宏'</span>:<span class="ql-token hljs-string">'心中的日月'</span>，<span class="ql-token hljs-string">'林俊杰'</span>:<span class="ql-token hljs-string">'小酒窝'</span>}</div><div class="ql-code-block" line="Efc2">#七里香</div></div><p>​    2）删除元素</p><p>​    del 字典名[键]</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="UJTj">album = {<span class="ql-token hljs-string">'周杰伦'</span>:<span class="ql-token hljs-string">'七里香'</span>,<span class="ql-token hljs-string">'王力宏'</span>:<span class="ql-token hljs-string">'心中的日月'</span>}</div><div class="ql-code-block" line="QaaU"><span class="ql-token hljs-selector-tag">del</span> album[<span class="ql-token hljs-string">'周杰伦'</span>]</div><div class="ql-code-block" line="4tQo"><span class="ql-token hljs-function">print(album)</span></div><div class="ql-code-block" line="G5WT">#结果显示</div><div class="ql-code-block" line="J5OU">#{<span class="ql-token hljs-string">'王力宏'</span>:<span class="ql-token hljs-string">'心中的日月'</span>}</div></div><p>​    3）修改元素</p><p>​    如果不是整个键值对都不需要，只需要改变对应key下的value，修改就可以，不需要del。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="e5fd">dict1 = {<span class="ql-token hljs-string">'小明'</span>:<span class="ql-token hljs-string">'男'</span>}</div><div class="ql-code-block" line="FO02">dict1[<span class="ql-token hljs-string">'小明'</span>] = <span class="ql-token hljs-string">'女'</span> </div><div class="ql-code-block" line="rJp8"><span class="ql-token hljs-function">print(dict1)</span></div><div class="ql-code-block" line="lvzC">#字典没有偏移量，只能通过key找到元素位置</div></div><h3 id="三、列表与字典的嵌套"><a href="#三、列表与字典的嵌套" class="headerlink" title="三、列表与字典的嵌套"></a>三、列表与字典的嵌套</h3><ol><li>列表与列表</li></ol><p>​    列表中有两个列表元素，<a href="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210815/Python%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.png">1</a>表示取第二个元素（列表），<a href="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210815/if%E5%B5%8C%E5%A5%97.png">2</a>表示取第二个元素中的第三个元素（偏移量为2）。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="8gg3">student=[['小红','小黄','小橙'],['小绿','小蓝','小紫','小青']]</div><div class="ql-code-block" line="BWLi">print(student[<span class="ql-token hljs-string">1</span>][2])</div><div class="ql-code-block" line="gX6N"><span class="ql-token hljs-section">#结果显示为</span></div><div class="ql-code-block" line="jSRf"><span class="ql-token hljs-section">#小紫</span></div></div><ol><li>字典与字典</li></ol><p>​    字典中存储了两个字典，所以提取数据时只能用key值。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="ZwtB">scores={'第一组':{'小明':95,'小红':96},'第二组'{'小刚':94',小青':99}}</div><div class="ql-code-block" line="LjRq">print(scores[<span class="ql-token hljs-string">'第一组'</span>]['小红'])</div><div class="ql-code-block" line="s2uQ"><span class="ql-token hljs-section">#结果显示：</span></div><div class="ql-code-block" line="ZWzB"><span class="ql-token hljs-section">#96</span></div></div><ol><li>列表与字典</li></ol><p>​    使用偏移量从最外层括号到最内层括号取数。查找townee列表中的第六个元素中的第2个元素（一定是字典，因为之后用的是键值而不是偏移量）中key为’反面角色’的value。</p><div class="ql-code-block-container" spellcheck="false"><div class="ql-code-block" line="MyEl">townee = [</div><div class="ql-code-block" line="lQrR">&nbsp;&nbsp; &nbsp;{<span class="ql-token hljs-string">'海底王国'</span>:[<span class="ql-token hljs-string">'小美人鱼''海之王''小美人鱼的祖母''五位姐姐'</span>],<span class="ql-token hljs-string">'上层世界'</span>:[<span class="ql-token hljs-string">'王子'</span>,<span class="ql-token hljs-string">'邻国公主'</span>]},</div><div class="ql-code-block" line="yoLH">&nbsp; &nbsp; <span class="ql-token hljs-string">'丑小鸭'</span>,<span class="ql-token hljs-string">'坚定的锡兵'</span>,<span class="ql-token hljs-string">'睡美人'</span>,<span class="ql-token hljs-string">'青蛙王子'</span>,</div><div class="ql-code-block" line="sj0l">&nbsp; &nbsp; [{<span class="ql-token hljs-string">'主角'</span>:<span class="ql-token hljs-string">'小红帽'</span>,<span class="ql-token hljs-string">'配角1'</span>:<span class="ql-token hljs-string">'外婆'</span>,<span class="ql-token hljs-string">'配角2'</span>:<span class="ql-token hljs-string">'猎人'</span>},{<span class="ql-token hljs-string">'反面角色'</span>:<span class="ql-token hljs-string">'狼'</span>}]</div><div class="ql-code-block" line="Rzp7">&nbsp; &nbsp; ]</div><div class="ql-code-block" line="w5Qb">print(townee[<span class="ql-token hljs-number">5</span>][1][<span class="ql-token hljs-string">'反面角色'</span>])</div></div><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210815/%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E5%85%B8.png" alt="列表与字典"></p><p>2021.8.15</p><p>END…</p>]]></content>
    
    
    <categories>
      
      <category>Python学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo通过Netlify CMS实现在线编辑文章</title>
    <link href="/2021/08/14/Hexo%E9%80%9A%E8%BF%87Netlify-CMS%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E6%96%87%E7%AB%A0/"/>
    <url>/2021/08/14/Hexo%E9%80%9A%E8%BF%87Netlify-CMS%E5%AE%9E%E7%8E%B0%E5%9C%A8%E7%BA%BF%E7%BC%96%E8%BE%91%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="✨前言"><a href="#✨前言" class="headerlink" title="✨前言"></a>✨前言</h2><p>我们都知道，<a href="https://hexo.io/zh-cn/">Hexo</a> 是一个静态部署博客的框架，优点在于速度快，成本低（无需服务器），缺点在于繁琐，你每次更新文章都需要去改代码，再部署推送，修改配置也是如此，你不能像 <code>WordPress</code> 一样直接在后台修改配置并使它生效。</p><p>不过有很多教程可以让你无需繁琐的部署，只管推送代码，通过 <code>GitHub Actions</code>，<code>travis-ci</code>，<a href="https://vercel.com/">vercel</a>，<a href="netlifyhttps://www.netlify.com/">Netlify</a> 等都可以便捷的进行博客的部署，只管写代码然后推送就好，类似的教程有非常多，在此就不再重复介绍。那么，我们是否可以在此基础上，更加便捷的进行静态博客的写作和管理？答案是可以的。</p><p>我们可以通过将博客部署到 <a href="https://www.netlify.com/">Netlify</a>，并使用 <a href="https://www.netlifycms.org/">Netlify CMS</a> 来做到这一点。</p><p>首先，我们来了解一下配置完之后可以做到哪些事情？</p><ul><li>在线新建，编辑，预览，删除博客文章</li><li>支持文章草稿，工作流</li><li>支持对博客图片的管理</li><li>支持在线修改博客配置，例如对首页顶部图的修改，友链的修改</li></ul><h3 id="🎈图片预览"><a href="#🎈图片预览" class="headerlink" title="🎈图片预览"></a>🎈图片预览</h3><p>配置完的界面</p><p><img src="https://gitee.com/leicancun/cdn/raw/master/Netlify-cms/image-20210420211303684.png" alt="1"></p><p>在线对文章进行编辑，修改</p><p><img src="https://gitee.com/leicancun/cdn/raw/master/Netlify-cms/image-20210418222435713.png" alt="2"></p><h2 id="📃简单说明"><a href="#📃简单说明" class="headerlink" title="📃简单说明"></a>📃简单说明</h2><p>下面我将会以 <a href="https://hexo.io/zh-cn/">Hexo</a> + 做演示，只要你配置完成，几乎可以修改所有配置项。包括但不限于以下类型的文件<code>yml</code>、<code>yaml</code>、<code>toml</code>、<code>json</code>、<code>md</code>、<code>markdown</code>、<code>html</code>具体请查看 👉<a href="https://www.netlifycms.org/">Netlify CMS</a> 文档。</p><h2 id="🔧具体配置"><a href="#🔧具体配置" class="headerlink" title="🔧具体配置"></a>🔧具体配置</h2><p><a href="https://www.netlifycms.org/">Netlify CMS</a> 使用的前提条件是你必须将博客部署到 <a href="https://www.netlify.com/">Netlify</a> 上。因为网上有很多部署教程，这里不再重复。</p><p>具体可以查看：</p><ul><li><a href="https://guanqr.com/tech/website/deploy-blog-to-netlify/">博客通过 Netlify 实现持续集成</a></li><li><a href="https://io-oi.me/tech/deploy-static-site-to-netlify/">将 Hexo 静态博客部署到 Netlify</a></li></ul><h3 id="👟准备工作"><a href="#👟准备工作" class="headerlink" title="👟准备工作"></a>👟准备工作</h3><p>在部署完成后，你需要开启 <code>Identity</code></p><p><img src="https://gitee.com/leicancun/cdn/raw/master/Netlify-cms/image-20210418225044656.png" alt="图片内容"></p><p>进入设置中</p><p><img src="https://gitee.com/leicancun/cdn/raw/master/Netlify-cms/image-20210418225125358.png" alt="图片内容"></p><p>将 Registration preferences 修改为 Invite only 此项为是否开启注册，默认是开启注册。修改为 Invite only 后表示仅受邀请的用户可以注册，当然此项你可以在自己注册完毕之后再行修改。</p><p><img src="https://gitee.com/leicancun/cdn/raw/master/Netlify-cms/image-20210418225239607.png" alt="图片内容"></p><p>下滑找到 Git Gateway 并开启。<br><img src="https://gitee.com/leicancun/cdn/raw/master/Netlify-cms/image-20210418225726557.png" alt="图片内容"></p><p>至此准备工作完成</p><h3 id="🎨安装"><a href="#🎨安装" class="headerlink" title="🎨安装"></a>🎨安装</h3><h4 id="Step1-添加依赖（二选一）"><a href="#Step1-添加依赖（二选一）" class="headerlink" title="Step1: 添加依赖（二选一）"></a>Step1: 添加依赖（二选一）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add hexo-netlify-cms<br>// or npm<br>npm i hexo-netlify-cms --save<br></code></pre></td></tr></table></figure><h4 id="Step2-在Hexo中添加配置"><a href="#Step2-在Hexo中添加配置" class="headerlink" title="Step2: 在Hexo中添加配置"></a>Step2: 在Hexo中添加配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">netlify_cms:</span><br>  <span class="hljs-attr">backend:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">git-gateway</span><br>    <span class="hljs-attr">branch:</span> <span class="hljs-string">man</span> <span class="hljs-comment">#这里以你的仓库实际分支为准，有的是master</span><br></code></pre></td></tr></table></figure><h4 id="Step3-添加netlify-identity-widget-js-代码如下"><a href="#Step3-添加netlify-identity-widget-js-代码如下" class="headerlink" title="Step3: 添加netlify-identity-widget.js, 代码如下"></a>Step3: 添加netlify-identity-widget.js, 代码如下</h4><script src="https://identity.netlify.com/v1/netlify-identity-widget.js"></script><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210814/10.png" alt="图片内容"></p><p><strong>注意： 建议将身份认证设为仅邀请模式</strong></p><p>Okay, 现在Netlify CMS已经好了, 你可以访问<code>你的站点域名/admin</code>查看</p><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><p>自定义pages自动生成配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">netlify_cms:<br>  # pages auto generate<br>  pages: <br>    enabled: true<br>    # over page collection config<br>    # if fields not set, would use posts fields config<br>    config:<br>      label: &quot;Page&quot;<br>      delete: false<br>      editor:<br>        preview: true<br>      # fields:<br></code></pre></td></tr></table></figure><p>自定义配置文件，覆盖默认的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">netlify_cms:<br>  config_file: netlify.yaml<br></code></pre></td></tr></table></figure><p>开启/关闭覆盖时间格式配置(默认true)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">netlify_cms:<br>  over_format: true<br></code></pre></td></tr></table></figure><p>添加脚本, 用于自定义组件和预览样式<br>例如：<br>添加<code>example/source/js/cms/youtube.js</code>至你的博客下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text"># 需要跳过配置<br>skip_render:<br>  - js/**<br>netlify_cms:<br>  scripts:<br>    - js/cms/youtube.js<br></code></pre></td></tr></table></figure><p>另外，其他的<code>netlify_cms</code>配置变量可以在<a href="https://link.zhihu.com/?target=https://www.netlifycms.org/docs/configuration-options/">Netlify CMS</a>中找到</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">yarn link<br>cd example<br>yarn link hexo-netlify-cms<br>hexo s<br></code></pre></td></tr></table></figure><h4 id="关于脚本"><a href="#关于脚本" class="headerlink" title="关于脚本"></a>关于脚本</h4><p>事实上只是简单的在admin的页面下引入，可以通过Netlift CMS的全局变量<code>CMS</code>添加你想实现的自定义组件等。但这块需要花很多时间维护，毕竟预览的原理和hexo生成文件并不一样…</p><p>后续可能会添加对Image Tag的支持(其它应该不考虑实现，因为用不到)….</p><h2 id="详细可见官方中文文档"><a href="#详细可见官方中文文档" class="headerlink" title="详细可见官方中文文档"></a>详细可见官方中文文档</h2><p><a href="https://github.com/jiangtj/hexo-netlify-cms/blob/master/README-ZH.md">点击此处跳转</a></p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><a href="jiangtj/hexo-netlify-cms">jiangtj/hexo-netlify-cms</a></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机投屏程序&lt;new&gt;</title>
    <link href="/2021/08/14/%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E7%A8%8B%E5%BA%8F-new/"/>
    <url>/2021/08/14/%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E7%A8%8B%E5%BA%8F-new/</url>
    
    <content type="html"><![CDATA[<h1 id="AnLink-在电脑上操作手机"><a href="#AnLink-在电脑上操作手机" class="headerlink" title="AnLink-在电脑上操作手机"></a>AnLink-在电脑上操作手机</h1><p>AnLink是一款免费的电脑控制手机软件，使用它能够方面的在电脑上操作手机。几乎支持所有的安卓手机，支持wifi和usb等方式连接，能够直接使用键盘和鼠标操作手机，支持多点触控，共享剪切板。</p><p>相比于联想的Lenovo One Lite，更加轻便简介占用更低且<strong>开源</strong>！</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210814/Anlink4.png" alt="充电动画显示"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210814/Anlink2.png" alt="设置页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210814/Alink3.png" alt="关于页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210814/Anlink1.png" alt="默认页面"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210814/Anlink5.png" alt="投屏显示效果"></p><h2 id="软件官网"><a href="#软件官网" class="headerlink" title="软件官网"></a>软件官网</h2><p><a href="https://anl.ink/">https://anl.ink/</a>【进入下载】</p><h3 id="中文补丁"><a href="#中文补丁" class="headerlink" title="中文补丁"></a>中文补丁</h3><p>软件默认英文，作为需要去GitHub下载相应补丁手动导入重启即可</p><p>补丁链接：<a href="https://github.com/AnLinkSoft/AnLinkTranslation">https://github.com/AnLinkSoft/AnLinkTranslation</a></p>]]></content>
    
    
    <categories>
      
      <category>软件分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WSL开启图形化（GUI）</title>
    <link href="/2021/08/03/WSL%E5%BC%80%E5%90%AF%E5%9B%BE%E5%BD%A2%E5%8C%96%EF%BC%88GUI%EF%BC%89/"/>
    <url>/2021/08/03/WSL%E5%BC%80%E5%90%AF%E5%9B%BE%E5%BD%A2%E5%8C%96%EF%BC%88GUI%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>WSL如何开启图形化？</p><p>相信这是一个很多使用过的朋友想知道的问题，</p><p>那么今天我给大家带来通过MOE万能脚本自动部署的教程</p><iframe src="//player.bilibili.com/player.html?aid=249536735&bvid=BV1sv411J7mY&cid=381589100&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>视频地址：<a href="https://www.bilibili.com/video/BV1sv411J7mY?share_source=copy_web">https://www.bilibili.com/video/BV1sv411J7mY?share_source=copy_web</a></p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java学习笔记-我的第一个Java程序</title>
    <link href="/2021/07/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/"/>
    <url>/2021/07/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAJava%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="Java简介"><a href="#Java简介" class="headerlink" title="Java简介"></a>Java简介</h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的高级程序设计语言。</p><p>Java 可运行于多个平台，如 Windows, Mac OS 及其他多种 UNIX 版本的系统。</p><p>本教程通过简单的实例将让大家更好的了解 Java 编程语言。</p><p>移动操作系统 Android 大部分的代码采用 Java 编程语言编程。</p><h2 id="我的第一个-JAVA-程序"><a href="#我的第一个-JAVA-程序" class="headerlink" title="我的第一个 JAVA 程序"></a>我的第一个 JAVA 程序</h2><p>以下我通过一个简单的实例来展示 Java 编程，创建文件 <strong>HelloWorld.java(文件名需与类名一致)</strong>, 代码如下：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：<strong>String args[]</strong> 与<strong>String[] args</strong> 都可以执行，但推荐使用<strong>String[] args</strong>，这样可以避免歧义和误读。</p><p>运行以上实例，输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$ javac HelloWorld.java<br>$ java HelloWorld<br>Hello World<br></code></pre></td></tr></table></figure><h3 id="执行命令解析："><a href="#执行命令解析：" class="headerlink" title="执行命令解析："></a>执行命令解析：</h3><p>以上我使用了两个命令 <strong>javac</strong> 和 <strong>java</strong>。</p><p><strong>javac</strong> 后面跟着的是java文件的文件名，例如 <strong>HelloWorld.java</strong>。 该命令用于<u>将 java 源文件编译为 class 字节码文件</u>，如： <strong>javac HelloWorld.java</strong>。</p><p>运行javac命令后，如果成功编译没有错误的话，会出现一个 HelloWorld.class 的文件。</p><p><strong>java</strong> 后面跟着的是java文件中的类名,例如 HelloWorld 就是类名，如: java HelloWorld。</p><p><strong>注意</strong>：java命令后面不要加.class。</p><p>Gif 图演示：</p><p><img src="https://ae01.alicdn.com/kf/H00a67a5eb78f4c3785ca3e22fc08c25d1.png" alt="java-HelloWorld.gif"></p><h2 id="易混知识点解析"><a href="#易混知识点解析" class="headerlink" title="易混知识点解析"></a>易混知识点解析</h2><p>有的小伙伴看到后不理解，为什么是 <strong>String[] args</strong>，这个 <strong>args</strong> 是干嘛的？</p><p><strong>String[] args</strong> 可以看出来<u>它是一个数组</u>。在命令行中比如运行 <strong>Test.class</strong> 文件,你可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java Test runoob<br></code></pre></td></tr></table></figure><p>相当于给数组传入了一个 <strong>runoob</strong> 字符串。也可以打印出来，可以作为简单的输入。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(args[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行以上实例，输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$ javac Test.java<br>$ java Test runoob<br>runoob<br></code></pre></td></tr></table></figure><p>此处注意，main 是一个程序的入口，一个 java 程序运行必须而且有且仅有一个 main 方法。</p><p>args[0] 是你传入的第一个参数，args[1]是传入的第二个参数，以此类推。</p><blockquote><p><strong>String[] args</strong> 还有一种等价的写法： <strong>String… args</strong></p><p>前者为数组形式, 后者为可变参数形式。</p><p>前者用得较多, 但是看到后者也应认识。</p></blockquote><p>Java 程序利用 main 函数中 args 参数实现参数的传递(<strong>传递空格处理</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String []args)</span></span><br><span class="hljs-function">    </span>&#123;<br>        System.out.println(args[<span class="hljs-number">0</span>]);<br>        System.out.println(args[<span class="hljs-number">1</span>]);<br>        System.out.println(args[<span class="hljs-number">2</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用控制台编译运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">$ javac Test.java<br>$ java Test aaa bbb ccc <br>aaa<br>bbb<br>ccc<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>三个参数之间用空格隔开！</p><p><strong>如果要输出空格怎么办？</strong></p><p>只需要在包含空格的参数上，使用双引号 <strong>“”</strong> 即可。</p><p>实例运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">$ java Test aaa <span class="hljs-string">&quot;b   bb&quot;</span> ccc<br>aaa<br>b   bb<br>ccc<br></code></pre></td></tr></table></figure><blockquote><p><strong>public static void main(String[] args) 是什么意思？</strong></p><p>这是 Java 程序的入口地址，Java 虚拟机运行程序的时候首先找的就是 main 方法。跟 C 语言里面的 main() 函数的作用是一样的。只有有 main() 方法的 Java 程序才能够被 Java 虚拟机运行，可理解为规定的格式。</p><p>对于里面的参数及修饰符：</p><ul><li> <strong>public</strong>：表示的这个程序的访问权限，表示的是任何的场合可以被引用，这样 Java 虚拟机就可以找到 main() 方法,从而来运行 <strong>javac</strong> 程序。</li><li> <strong>static</strong>： 表明方法是静态的，不依赖类的对象的，是属于类的，在类加载的时候 main() 方法也随着加载到内存中去。</li><li> **void:main()**：方法是不需要返回值的。</li><li> <strong>main</strong>：约定俗成，规定的。</li><li> <strong>String[] args</strong>：从控制台接收参数。</li></ul></blockquote><p>2021.7.18</p><p>END…</p>]]></content>
    
    
    <categories>
      
      <category>Java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>镜像站成立</title>
    <link href="/2021/07/11/%E9%95%9C%E5%83%8F%E7%AB%99%E6%88%90%E7%AB%8B/"/>
    <url>/2021/07/11/%E9%95%9C%E5%83%8F%E7%AB%99%E6%88%90%E7%AB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="关于镜像站"><a href="#关于镜像站" class="headerlink" title="关于镜像站"></a>关于镜像站</h2><p>由于国内的DNS污染以及日常运维等问题，为了方便管理、加速用户访问，现已制作镜像站作为国内节点。</p><p>镜像站速度基本无延迟，不用挂载VPN等优势更加亲民。</p><p>欢迎大家以后使用新站！</p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>暂定镜像站与本站点保持同步更新，镜像站作为实验站点，可能会提前引入一些新特色以及bug。</p><h2 id="镜像站地址"><a href="#镜像站地址" class="headerlink" title="镜像站地址"></a>镜像站地址</h2><p><a href="https://xingchencloud.ml/">xingchencloud.ml</a></p><h3 id="停止维护通知"><a href="#停止维护通知" class="headerlink" title="停止维护通知"></a>停止维护通知</h3><p>2021.8.13：镜像站可能即将停止更新，不在维护！</p><p>以后应该还能正常访问（看是否有人攻击)，但是因为某些原因不在继续更新了。</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新网盘上线啦</title>
    <link href="/2021/07/03/%E6%96%B0%E7%BD%91%E7%9B%98%E4%B8%8A%E7%BA%BF%E5%95%A6/"/>
    <url>/2021/07/03/%E6%96%B0%E7%BD%91%E7%9B%98%E4%B8%8A%E7%BA%BF%E5%95%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="新网盘概览"><a href="#新网盘概览" class="headerlink" title="新网盘概览"></a>新网盘概览</h2><p>经过一段时间的测试，新网盘已经趋于稳定，采用阿里云api接口，速度更稳定，目前仅用于存放部分文件（下载链接有效期仅为15分钟，需要某些文件请保证自己的网速够快）</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210703/2.png" alt="示例"></p><h2 id="在线预览速度也是扛扛的【1080P】"><a href="#在线预览速度也是扛扛的【1080P】" class="headerlink" title="在线预览速度也是扛扛的【1080P】"></a>在线预览速度也是扛扛的【1080P】</h2><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210703/3.png" alt="图片内容"></p><h2 id="下载速度直接跑满带宽【国内节点】"><a href="#下载速度直接跑满带宽【国内节点】" class="headerlink" title="下载速度直接跑满带宽【国内节点】"></a>下载速度直接跑满带宽【国内节点】</h2><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210703/4.png" alt="图片内容"></p><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p>本次项目基于阿里Teambition</p><p>链接：<a href="http://gasolcloudteam.ml/">gasolcloudteam.ml</a></p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>2021.8.6：</p><p>因阿里方调整，固本网盘将于2021年9月30日正式下架！</p><p>届时将正式启用备用网盘</p><p>2021.8.13：</p><p>网盘因多次更新迁移，现最稳定的几个资源存储位置：</p><p><a href="http://gasolcloudteam.ml/">http://gasolcloudteam.ml/</a>【预计2021.9.30正式停止服务】</p><p><a href="http://xingchendrive.ml/">http://xingchendrive.ml/</a>【推荐】</p><p><a href="https://xingchencloud.top/">https://xingchencloud.top/</a>【推荐，使用前请点击页脚的重构目录更新数据，重构密码：xingchen.love】</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好世界-hello world 电影在线观看</title>
    <link href="/2021/06/25/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C-hello-world-%E7%94%B5%E5%BD%B1%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B/"/>
    <url>/2021/06/25/%E4%BD%A0%E5%A5%BD%E4%B8%96%E7%95%8C-hello-world-%E7%94%B5%E5%BD%B1%E5%9C%A8%E7%BA%BF%E8%A7%82%E7%9C%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>你好世界已经出来有一段时间了相信很多小伙伴早就想看了，我最近刚刚回家，所以资源上传的晚了点，想看的朋友们可以通过网站通道直接预览了！</p><h2 id="1080P在线预览通道【测试接口】"><a href="#1080P在线预览通道【测试接口】" class="headerlink" title="1080P在线预览通道【测试接口】"></a>1080P在线预览通道【测试接口】</h2><p>因不可控因素，本接口暂停在中国大陆的服务！</p><h2 id="1080P在线预览【稳定接口】"><a href="#1080P在线预览【稳定接口】" class="headerlink" title="1080P在线预览【稳定接口】"></a>1080P在线预览【稳定接口】</h2><p><video controls="controls" src="https://sf1-ttcdn-tos.pstatp.com/obj/tos-cn-v-0004/06f0a746c1c44fb6aea7bc2dcce89df5" id="ckplayer_a1" width="100%" webkit-playsinline=""></video></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>百度网盘：<a href="https://pan.baidu.com/s/1VKDo7lvnTP2XkG7VgsUGQg">https://pan.baidu.com/s/1VKDo7lvnTP2XkG7VgsUGQg</a> </p><p>阿里网盘：<a href="https://www.aliyundrive.com/s/WRRoic32ihT">https://www.aliyundrive.com/s/WRRoic32ihT</a></p><p>迅雷云盘：<a href="https://pan.xunlei.com/s/VMd1Xxsw7ZgqpDjqKZrazRdcA1">https://pan.xunlei.com/s/VMd1Xxsw7ZgqpDjqKZrazRdcA1</a> 提取码：b26s</p>]]></content>
    
    
    <categories>
      
      <category>电影资源分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影资源分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandownload复刻完毕</title>
    <link href="/2021/06/25/Pandownload%E5%A4%8D%E5%88%BB%E5%AE%8C%E6%AF%95/"/>
    <url>/2021/06/25/Pandownload%E5%A4%8D%E5%88%BB%E5%AE%8C%E6%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="没错就是以前那个破解百度网盘限速的Pandownload"><a href="#没错就是以前那个破解百度网盘限速的Pandownload" class="headerlink" title="没错就是以前那个破解百度网盘限速的Pandownload"></a>没错就是以前那个破解百度网盘限速的Pandownload</h2><p>今天自费搞了个Pandownload不限速下载服务，可以实现百度网盘不限速下载。</p><p>希望大家不要滥用，每个ip每天可以下载5次。</p><p>以下为测试视频：</p><iframe src="//player.bilibili.com/player.html?aid=206357158&bvid=BV1oh41187J3&cid=359402021&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=206357158&bvid=BV1oh41187J3&cid=359407045&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>哔哩哔哩高清视频地址：<a href="https://www.bilibili.com/video/BV1oh41187J3">https://www.bilibili.com/video/BV1oh41187J3</a></p><h2 id="Pandownload主页到后台管理页面总览"><a href="#Pandownload主页到后台管理页面总览" class="headerlink" title="Pandownload主页到后台管理页面总览"></a>Pandownload主页到后台管理页面总览</h2><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210625/home.png" alt="图片内容"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210625/2.png" alt="图片内容"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210625/3.png" alt="图片内容"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210625/4.png" alt="图片内容"></p><p>感谢Github大佬的开源项目：<a href="https://github.com/yuantuo666/baiduwp-php">https://github.com/yuantuo666/baiduwp-php</a></p><p>感兴趣的也可以自己搭建试试（需要自备svip账号），如果本文对您有帮助麻烦三连或者小额捐赠表示支持，谢谢。</p><p>感兴趣的也可以自己搭建试试（需要自备svip账号），如果本文对您有帮助麻烦三连或者小额捐赠表示支持，谢谢。</p><p>感兴趣的也可以自己搭建试试（需要自备svip账号），如果本文对您有帮助麻烦三连或者小额捐赠表示支持，谢谢。</p><h2 id="成品地址"><a href="#成品地址" class="headerlink" title="成品地址"></a>成品地址</h2><p>项目地址：<del><a href="http://pandownload.ezyro.com/">http://pandownload.ezyro.com/</a></del></p><p>下载密码：<del>联系站长获取</del></p><h3 id="停止维护通知"><a href="#停止维护通知" class="headerlink" title="停止维护通知"></a>停止维护通知</h3><p>2021.8.13：本项目本人停止维护！请另寻其他up搭建的成品，谢谢！</p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站大更新</title>
    <link href="/2021/06/24/%E7%BD%91%E7%AB%99%E5%A4%A7%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/06/24/%E7%BD%91%E7%AB%99%E5%A4%A7%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>不知不觉就快高二了，时间过的好快啊。</p><p>回家第一件事就是更新了本站，实在是受不了那老土的界面了去GitHub</p><p>找到相应主题后又折腾了半天</p><p>以下为部分代码展示【感谢Sw-blog主题作者提供的源文件】</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210624/1.png" alt="图片内容"></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210624/2.png" alt="图片内容"></p><p>更换了网站的CSS等，界面UI全部更换，相应内容全部迁移到新站。</p><p>这次网站相比之前不在那么单调了，但是加载时不挂载VPN的情况下</p><p>会比之前慢很多，以后有时间了做个CDN加速吧。</p><p>做了两天勉强完工吧，部分地方以后有时间再改了吧。</p><p>上传代码，完事儿，今天就折腾到这里吧。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/20210624/3.png" alt="图片内容"></p><p>2021.8.13：网站多次更新，UI等频繁更换，本文仅作留恋</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鸿蒙系统在线体验方案-星尘</title>
    <link href="/2021/02/15/%E9%B8%BF%E8%92%99%E7%B3%BB%E7%BB%9F%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C%E6%96%B9%E6%A1%88-%E6%98%9F%E5%B0%98/"/>
    <url>/2021/02/15/%E9%B8%BF%E8%92%99%E7%B3%BB%E7%BB%9F%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C%E6%96%B9%E6%A1%88-%E6%98%9F%E5%B0%98/</url>
    
    <content type="html"><![CDATA[<h1 id="使用模拟器运行应用"><a href="#使用模拟器运行应用" class="headerlink" title="使用模拟器运行应用"></a>使用模拟器运行应用</h1><p>DevEco Studio提供模拟器供开发者运行和调试HarmonyOS应用，对于Phone、Tablet、Car、TV和Wearable可以使用<strong>Remote Emulator</strong>运行应用，对于Lite Wearable和Smart Vision可以使用<strong>Simulator</strong>运行应用。</p><h2 id="使用Remote-Emulator运行应用"><a href="#使用Remote-Emulator运行应用" class="headerlink" title="使用Remote Emulator运行应用"></a>使用Remote Emulator运行应用</h2><p>DevEco Studio提供的<strong>Remote Emulator</strong>可以运行和调试Phone、Tablet、Car、TV和Wearable设备的HarmonyOS应用。在Remote Emulator上运行应用兼容签名与不签名两种类型的HAP。</p><p>Remote Emulator每次使用时长为1小时，到期后会自动释放资源，请及时完成HarmonyOS应用的调试。如果Remote Emulator到期释放后，您可以重新申请资源。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B71.png" alt="鸿蒙开发者工具1"></p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>首先，打开鸿蒙开发者工具（DevEco Studio），新建一个项目</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B72.png" alt="鸿蒙开发者工具2"></p><p>类型选择手机</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B73.png" alt="鸿蒙开发者工具3"></p><p>等待编辑页面加载完毕后在DevEco Studio菜单栏，点击<strong>Tools &gt; HVD Manager</strong>。首次使用Remote Emulator，需下载相关资源，请点击<strong>OK</strong>，等待资源下载完成后，请重新点击<strong>Tools &gt; HVD Manager</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B74.png" alt="鸿蒙开发者工具4"></p><p>在浏览器中弹出华为开发者联盟帐号登录界面，请输入已实名认证的华为开发者联盟帐号的用户名和密码进行登录。<strong>（注：实名认证需成年人才能通过！）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B75.png" alt="鸿蒙开发者工具5"></p><p>登录后，请点击界面的<strong>允许</strong>按钮进行授权。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B76.png" alt="鸿蒙开发者工具6"></p><p>点击已经连接的Remote Emulator设备运行按钮<img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.75055469843034788914872105379419:50520210085159:2800:3D26C0B82A166754E8AD662515E84E4EC75785708B987765675CF22830B904B9.png?needInitFileName=true?needInitFileName=true" alt="img">，启动远程模拟设备（同一时间只能启动一个设备）。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B77.png" alt="鸿蒙开发者工具7"></p><p>点击DevEco Studio的<strong>Run &gt; Run’模块名称’<strong>或<img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.15736694198589975970104370753722:50520210085159:2800:18DDBD1F497E826A078CC4AD51E5D45C1F1DDA482E5A3A1053BBEB2E86C17CC1.png?needInitFileName=true?needInitFileName=true" alt="img">，或使用默认快捷键</strong>Shift+F10</strong>（Mac为<strong>Control+R</strong>）</p><p>在弹出的Select Deployment Target界面选择已启动的Remote Emulator设备，点击<strong>OK</strong>按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B78.png"></p><p>DevEco Studio会启动应用的编译构建，完成后应用即可运行在Remote Emulator上。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E9%B8%BF%E8%92%99%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B79.png"></p><p>Remote Emulator侧边栏按钮作用：</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.94969050589840983619857892936031:50520210085159:2800:11D0AE054867F15832259EE46B7A3A97852790B6F01F1F276C24BBC9329C98F9.png?needInitFileName=true?needInitFileName=true" alt="img">：释放当前正在使用的Remote Emulator，单次使用时长为1小时。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.01054159534767479809865528848328:50520210085159:2800:EA0AC8C6E4D78960960F7CB1014E702EEF32F3F5275A7872948FA7FA296996EC.png?needInitFileName=true?needInitFileName=true" alt="img">：设置Remote Emulator设备分辨率。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.79688989657115526346960586850561:50520210085159:2800:2FC5BBC31CE51186FB02CDC5820A67078567A6F256C039117C94CEE511049B11.png?needInitFileName=true?needInitFileName=true" alt="img">：顺时针旋转屏幕，只有Phone和Tablet支持横竖屏切换的应用才能旋转。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.10389675745606253710101932018178:50520210085159:2800:47DBF9443F4378FEA2D93EB14C1CB01D44A6DA3DEB4FABEE5937983D76745674.png?needInitFileName=true?needInitFileName=true" alt="img">后退按钮。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210210162223.04980202603311831952714065339760:50520210085159:2800:7E52B2EF3CCA799628755ABEB56C663E9C92F078ED0B04BA4143111C596FC4E8.png?needInitFileName=true?needInitFileName=true" alt="img">：返回设备主界面。</p><p>至此关于使用鸿蒙官方开发者工具（DevEco Studio）体验鸿蒙系统教程到此结束，感谢您的观看！</p><p>如有错误地方欢迎联系我们修改！</p><h3 id="DevEco-Studio下载地址"><a href="#DevEco-Studio下载地址" class="headerlink" title="DevEco Studio下载地址"></a>DevEco Studio下载地址</h3><p><a href="https://xingchen.love/%E5%8D%8E%E4%B8%BA%E9%B8%BF%E8%92%99%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C%E5%B7%A5%E5%85%B7/">点击跳转</a></p><p>建议使用aria2等多线程方式【部分地区访问缓慢】</p>]]></content>
    
    
    <categories>
      
      <category>软件教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网盘搭建完毕-星尘</title>
    <link href="/2021/02/11/%E7%BD%91%E7%9B%98%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%AF%95-%E6%98%9F%E5%B0%98/"/>
    <url>/2021/02/11/%E7%BD%91%E7%9B%98%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%AF%95-%E6%98%9F%E5%B0%98/</url>
    
    <content type="html"><![CDATA[<h1 id="本站网盘已经搭建完毕！"><a href="#本站网盘已经搭建完毕！" class="headerlink" title="本站网盘已经搭建完毕！"></a>本站网盘已经搭建完毕！</h1><p>现在终于可以做到反垄断了，不用担心个人数据存储问题了，以后分享的资源都将在网盘里做一份备份，大家可以随时访问、下载。</p><p>以下为测试视频（注：目前网盘仅作为我方分享下载功能，暂不开放注册使用）</p><p><video controls="controls" src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/网盘测试-1.mp4" id="ckplayer_a1" width="100%" webkit-playsinline=""></video></p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E7%BD%91%E7%9B%98%E6%B5%8B%E8%AF%95-2.PNG" alt="网盘测试https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/网盘测试-2.PNG"></p><h2 id="体验地址："><a href="#体验地址：" class="headerlink" title="体验地址："></a>体验地址：</h2><p>临时域名：<del>lihaoblog.tk</del>【已更新，弃用】</p><p>正式域名：<a href="https://xingchen.love/">xingchen.love</a>【更新了UI界面等，因服务商原因，速度过慢，停止维护】</p><p>2021.8.13：</p><p>网盘因多次更新迁移，现最稳定的几个资源存储位置：</p><p><a href="http://gasolcloudteam.ml/">http://gasolcloudteam.ml/</a>【预计2021.9.30正式停止服务】</p><p><a href="http://xingchendrive.ml/">http://xingchendrive.ml/</a>【推荐】</p><p><a href="https://xingchencloud.top/">https://xingchencloud.top/</a>【推荐，使用前请点击页脚的重构目录更新数据，重构密码：xingchen.love】</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
    <tags>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机投屏解决方案-星尘</title>
    <link href="/2021/02/05/%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%98%9F%E5%B0%98/"/>
    <url>/2021/02/05/%E6%89%8B%E6%9C%BA%E6%8A%95%E5%B1%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%98%9F%E5%B0%98/</url>
    
    <content type="html"><![CDATA[<h1 id="关于手机投屏到电脑"><a href="#关于手机投屏到电脑" class="headerlink" title="关于手机投屏到电脑"></a>关于手机投屏到电脑</h1><p>现在市面上五花八门的投屏软件一大堆，随便一找什么  米卓投屏、爱投屏  下载后调试了半天，发现其实并不好用，甚至根本用不了！</p><p>那么我就像简单的投个屏有那么难吗？</p><p>非也！今天站长就给大家带来一款投屏软件：<strong>Lenovo One Lite</strong></p><h2 id="Lenovo-One-Lite简介"><a href="#Lenovo-One-Lite简介" class="headerlink" title="Lenovo One Lite简介"></a>Lenovo One Lite简介</h2><p>​        Lenovo One lite手机投屏神器是联想投屏软件，让你可以在PC端轻松投屏，基于usb有线技术，实现快速连接，稳定流畅，打破了设备和系统之间的壁垒，支持pc和手机端文件有线传输，多一种方式，多一种选择，帮助用户实现电脑与手机完美融合。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E8%81%94%E6%83%B3%E6%8A%95%E5%B1%8F.jpg" alt="示例"></p><p>以下为宣传视频：<br><video controls="controls" src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/v2.mp4" id="ckplayer_a1" width="100%" webkit-playsinline=""></video></p><h3 id="特色功能"><a href="#特色功能" class="headerlink" title="特色功能"></a>特色功能</h3><p>　　高清投屏，一键连接</p><p>　　新版本支持全品牌安卓设备，基于usb有线技术，实现快速连接，稳定流畅，更有画质优先，均衡模式，速度优先三种模式选择。</p><p>　　文件互传，不止一种选择</p><p>　　全新接入“互传联盟”无线传输协议，实现系统级的“互通”，为用户提供跨平台、高速、稳定和0流量的本地文件快传体验。同时支持pc和手机端文件有线传输，多一种方式，多一种选择。</p><p>　　键鼠模式，畅玩游戏</p><p>　　电脑玩手游，键盘、鼠标自定义控制，无需模拟器。高清画质，帧率自选，告别卡顿，开启手游新玩法！</p><p>　　软件特色系统深度融合</p><p>　　从系统层面实现互联，电脑与手机完美融合。</p><p>　　应用无缝打通</p><p>　　无需模拟器，在电脑上也可流畅使用安卓应用，打破生态壁垒。</p><p>　　文件快速互传</p><p>　　只需一步，就可实现文件跨设备无线互传，高效又便捷。</p><p>　　尽享大屏优势</p><p>　　仅需聚焦电脑，畅享大屏带来的观感提升和效率提高。</p><p><img src="https://cdn.jsdelivr.net/gh/Gasolcloudteam/cdn@main/%E8%81%94%E6%83%B3%E6%8A%95%E5%B1%8F.png" alt="安装界面"></p><p>心动不如行动，感兴趣的小伙伴快去体验吧！</p><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><p><a href="https://lihaoyun.lanzous.com/b0e8hgtyj">https://lihaoyun.lanzous.com/b0e8hgtyj</a><br>提取密码:lxtp</p><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>本人已找到更好的投屏软件，敬请期待后续更新！</p><p>本软件依旧可以正常使用！</p>]]></content>
    
    
    <categories>
      
      <category>软件分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/24/hello-world/"/>
    <url>/2021/01/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
